// Programa de entrada
// int foo(int y) { return y; } int main() { int x; x = foo(x); }

// RFP: Frame Pointer
// RSP: Stack Pointer
// RBSS: uninitialized data segment
	
// Inicializa os registradores rfp (RFP), rsp (SP), e rbss (RBSS)
// RFP e RSP apontam inicialmente para a base da pilha
// RBSS aponta para o início do segmento de dados
loadI 1024 => rfp
loadI 1024 => rsp
loadI 29 => rbss
// O código da função main está em L1, salta para lá	
jumpI => L1
// Início da função foo
L0:
i2i rsp => rfp     // Atualiza o rfp (RFP)
addI rsp, 20 => rsp    // Atualiza o rsp (SP)
loadAI rfp, 12 => r0   // Obtém o parâmetro
storeAI r0 => rfp, 20  // Salva o parâmetro na variável y
loadAI rfp, 20 => r0   // Salva o valor da variável y em r0
storeAI r0 => rfp, 16  // Registra o valor de retorno
loadAI rfp, 0 => r0    // Obtém end. retorno
loadAI rfp, 4 => r1    // Obtém rsp (SP) salvo
loadAI rfp, 8 => r2    // Obtém rfp (RFP) salvo
i2i r1 => rsp        // Atualiza o rsp (SP)
i2i r2 => rfp        // Atualiza o rfp (RFP)
jump => r0             // Salta para o endereço de retorno
// Início da função main	
L1:
addI rsp, 4 => rsp // Reserva espaço para a variável local x
addI rpc, 7  => r1      // Calcula o endereço de retorno (7 instruções abaixo)
storeAI r1  => rsp, 0  // Salva o endereço de retorno
storeAI rsp => rsp, 4  // Salva o rsp (SP)
storeAI rfp => rsp, 8  // Salva o rfp (RFP)
loadAI  rfp, 0 => r0   // Carrega o valor da variável x em r0
storeAI r0 => rsp, 12  // Empilha o parâmetro
jumpI => L0            // Salta para o início da função chamada
loadAI rsp, 16 => r0   // Retorno da função, carrega o valor de retorno
storeAI r0 => rfp, 0   // Salva o retorno na variável x
